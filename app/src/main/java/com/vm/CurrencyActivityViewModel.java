package com.vm;

import android.os.Build;
import android.os.Looper;

import androidx.annotation.RequiresApi;
import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;
import androidx.lifecycle.ViewModel;

import com.company.app.utils.Utils;
import com.github.mikephil.charting.data.Entry;
import com.model.CurrencyModel;
import com.model.ExpandableContent;

import org.json.JSONObject;

import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Scanner;

public class CurrencyActivityViewModel extends ViewModel {
    private MutableLiveData<ArrayList<CurrencyModel>> mCurrency;
    private MutableLiveData<HashMap<String, ExpandableContent>> mDescription;
    private static CurrencyActivityViewModel instance;

    public static CurrencyActivityViewModel getInstance() {
        if (instance == null) {
            instance = new CurrencyActivityViewModel();
        }

        return instance;
    }

    public LiveData<ArrayList<CurrencyModel>> getCurrencyList() {
        if (mCurrency != null) {
            return mCurrency;
        } else {
            return null;
        }


    }

    public MutableLiveData<HashMap<String, ExpandableContent>> getDescriptionData() {

        if (mDescription != null) {
            return mDescription;
        } else {
            return null;
        }


    }

    public LiveData<ArrayList<CurrencyModel>> getCurrency() {

        if (mCurrency == null) {

            mCurrency = new MutableLiveData<ArrayList<CurrencyModel>>();

            loadCurrencies();
        }

        return mCurrency;
    }

    @RequiresApi(api = Build.VERSION_CODES.N)
    public LiveData<HashMap<String, ExpandableContent>> getDescription(ArrayList<CurrencyModel> listGroup) {

        if (mDescription == null) {
            mDescription = new MutableLiveData<HashMap<String, ExpandableContent>>();

            loadDescription(listGroup);
        }

        return mDescription;
    }


    private void loadDescription(ArrayList<CurrencyModel> listGroup) {

        HashMap<String, ExpandableContent> listChild = new HashMap<String, ExpandableContent>();


        for (int i = 0; i < listGroup.size(); i++) {
            String convert = listGroup.get(i).getShortName();
            ArrayList<Entry> points = new ArrayList<Entry>();
            ArrayList<String> date_list = new ArrayList<String>();


            new Thread(() -> {
                try {

                    String b_convert = "https://api.fastforex.io/time-series?from=USD&to=EUR&interval=P1D&api_key=79e50f50e3-8e76f9519b-rjsb4e";
                    String a_convert = b_convert.replace("EUR", convert);
                    URL time_series = new URL(a_convert);
                    HttpURLConnection timeline_connection = (HttpURLConnection) time_series.openConnection();
                    timeline_connection.setReadTimeout(3000);
                    timeline_connection.setConnectTimeout(3000);
                    timeline_connection.addRequestProperty("key", "value");
                    timeline_connection.setRequestMethod("GET");
                    timeline_connection.connect();
                    StringBuilder timeline_builder = new StringBuilder();
                    Scanner timeline_scanner = new Scanner(time_series.openStream());
                    while (timeline_scanner.hasNext()) {
                        timeline_builder.append(timeline_scanner.nextLine());
                    }
                    timeline_scanner.close();
                    JSONObject timeline_object = new JSONObject(timeline_builder.toString());
                    Iterator<String> date = timeline_object.getJSONObject("results").getJSONObject(convert).keys();
                    int k = 0;

                    while (date.hasNext()) {


                        Entry point = new Entry(k, Float.parseFloat(timeline_object.getJSONObject("results").getJSONObject(convert).getString(date.next())));
                        date_list.add(date.next());
                        points.add(point);
                        k++;
                    }
                    timeline_connection.disconnect();
                } catch (Exception e) {
                    e.printStackTrace();

                }
            }).start();
            listChild.put(listGroup.get(i).getShortName(), new ExpandableContent(points, date_list, "", null));

        }


        mDescription.postValue(listChild);

    }

    private void loadCurrencies() {

        ArrayList<CurrencyModel> currencies = new ArrayList<CurrencyModel>();
        new Thread(() -> {
            try {


                URL prices = new URL("https://api.fastforex.io/fetch-all?api_key=79e50f50e3-8e76f9519b-rjsb4e");
                URL currencyNameSource = new URL("https://api.fastforex.io/currencies?api_key=79e50f50e3-8e76f9519b-rjsb4e");

                HttpURLConnection currencies_connection = (HttpURLConnection) prices.openConnection();
                currencies_connection.setReadTimeout(3000);
                currencies_connection.setConnectTimeout(3000);
                currencies_connection.addRequestProperty("key", "value");
                currencies_connection.setRequestMethod("GET");
                currencies_connection.connect();
                HttpURLConnection secondConnection = (HttpURLConnection) currencyNameSource.openConnection();
                secondConnection.setReadTimeout(3000);
                secondConnection.setConnectTimeout(3000);
                secondConnection.addRequestProperty("key", "value");
                secondConnection.setRequestMethod("GET");
                secondConnection.connect();


                StringBuilder currencies_information_builder = new StringBuilder();
                Scanner currencies_information_scanner = new Scanner(prices.openStream());
                while (currencies_information_scanner.hasNext()) {
                    currencies_information_builder.append(currencies_information_scanner.nextLine());
                }

                StringBuilder full_currency_name_builder = new StringBuilder();
                Scanner full_currency_name_scanner = new Scanner(currencyNameSource.openStream());
                while (full_currency_name_scanner.hasNext()) {
                    full_currency_name_builder.append(full_currency_name_scanner.nextLine());
                }
                full_currency_name_scanner.close();
                currencies_information_scanner.close();
                JSONObject nameList = new JSONObject(full_currency_name_builder.toString());
                Iterator<String> names = nameList.getJSONObject("currencies").keys();

                JSONObject currencies_information_body_json = new JSONObject(currencies_information_builder.toString());
                Iterator<String> currencies_information_results = currencies_information_body_json.getJSONObject("results").keys();
                secondConnection.disconnect();
                currencies_connection.disconnect();
                while (currencies_information_results.hasNext() && names.hasNext()) {
                    String key = currencies_information_results.next();
                    String name = names.next();
                    String b_convert = "https://api.fastforex.io/convert?from=USD&to=EUR&amount=1.000&api_key=79e50f50e3-8e76f9519b-rjsb4e";
                    String a_convert = b_convert.replace("EUR", name);
                    String convected_price = "https://api.fastforex.io/convert?from=EUR&to=USD&amount=1.000&api_key=79e50f50e3-8e76f9519b-rjsb4e";
                    String convected_price_after = convected_price.replace("EUR", name);
                    URL other_currency_to_USD = new URL(convected_price_after);
                    URL USD_to_other_currency = new URL(a_convert);
                    HttpURLConnection convert_USD = (HttpURLConnection) USD_to_other_currency.openConnection();
                    convert_USD.setReadTimeout(3000);
                    convert_USD.setConnectTimeout(3000);
                    convert_USD.addRequestProperty("key", "value");
                    convert_USD.setRequestMethod("GET");
                    convert_USD.connect();
                    StringBuilder convert_USD_body_builder = new StringBuilder();
                    Scanner convert_USD_scanner = new Scanner(USD_to_other_currency.openStream());
                    while (convert_USD_scanner.hasNext()) {
                        convert_USD_body_builder.append(convert_USD_scanner.nextLine());
                    }
                    JSONObject USD_to_other_currency_object = new JSONObject(convert_USD_body_builder.toString());
                    HttpURLConnection convert_currency_to_USD = (HttpURLConnection) other_currency_to_USD.openConnection();
                    convert_currency_to_USD.setReadTimeout(3000);
                    convert_currency_to_USD.setConnectTimeout(3000);
                    convert_currency_to_USD.addRequestProperty("key", "value");
                    convert_currency_to_USD.setRequestMethod("GET");
                    convert_currency_to_USD.connect();
                    StringBuilder convert_other_currency_to_USD_body_builder = new StringBuilder();
                    Scanner convert_other_currency_to_USD_scanner = new Scanner(other_currency_to_USD.openStream());
                    while (convert_other_currency_to_USD_scanner.hasNext()) {
                        convert_other_currency_to_USD_body_builder.append(convert_other_currency_to_USD_scanner.nextLine());
                    }
                    JSONObject other_currency_to_USD_object = new JSONObject(convert_other_currency_to_USD_body_builder.toString());
                    convert_USD.disconnect();
                    convert_currency_to_USD.disconnect();

System.out.println(key);

                    currencies.add(new CurrencyModel(key, nameList.getJSONObject("currencies").getString(name), "", new Utils().formatPrice(Float.parseFloat(USD_to_other_currency_object.getJSONObject("result").getString("rate"))), new Utils().formatPrice(Float.parseFloat(other_currency_to_USD_object.getJSONObject("result").getString("rate")))));
                }


                mCurrency.postValue(currencies);

            } catch (Exception e) {
                e.printStackTrace();
            }

        }).start();


    }
}

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































